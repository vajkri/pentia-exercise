/*------------------------------------*\

		_tools.mixins
    Created by krisztinavajda on 08/01/16.
\*------------------------------------*/

// Apply ‘attention’ styles in one go.
@mixin attention($self: false) {

	@if($self != false) {

		&,
		&:hover,
		&:active,
		&:focus {
			@content;
		}

	}

	@else {

		&:hover,
		&:active,
		&:focus {
			@content;
		}

	}

}



// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value, e.g.:
//
// .foo {
//     @include inuit-font-size(12px);
// }
//
// This will generate a rem-based font-size with its pixel fallback, as well as
// a unitless line-height which will place the element on your baseline, e.g.:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
//     line-height: 2;
// }
//
// If you do not want inuitcss to generate you a line-height automatically, you
// simply pass in your own as a second paramater:
//
// .foo {
//     @include inuit-font-size(12px, 1.5);
// }
//
// This will yield:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
//     line-height: 1.5;
// }
//
// This parameter can be any integer, ‘inherit’, or ‘normal’. If you don’t want
// a line-height at all, pass in a second paramater of ‘none’ or ‘false’:
//
// .foo {
//     @include inuit-font-size(12px, none);
// }
//
// This will yield:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
// }
@mixin inuit-font-size($inuit-font-size, $inuit-line-height: auto) {
	font-size: $inuit-font-size;
	font-size: ($inuit-font-size / $inuit-base-font-size) * 1rem;

	@if $inuit-line-height == auto {
		line-height: ceil($inuit-font-size / $inuit-base-line-height) * ($inuit-base-line-height / $inuit-font-size);
	}

	@else {

		@if (type-of($inuit-line-height) == number or $inuit-line-height == inherit or $inuit-line-height == normal) {
			line-height: $inuit-line-height;
		}

		@elseif ($inuit-line-height != none and $inuit-line-height != false) {
			@warn "D’oh! ‘#{$inuit-line-height}’ is not a valid value for `line-height`."
		}

	}
}





/// Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.
///
/// @param {Position} $position [relative]
///   A CSS position value
///
/// @param {Arglist} $coordinates [null null null null]
///   List of values that correspond to the 4-value syntax for the edges of a box
///
/// @example scss - Usage
///   .element {
///     @include position(absolute, 0 null null 10em);
///   }
///
/// @example css - CSS Output
///   .element {
///     left: 10em;
///     position: absolute;
///     top: 0;
///   }
///
/// @require {function} is-length
/// @require {function} unpack

@mixin position($position: relative, $coordinates: null null null null) {
	@if type-of($position) == list {
		$coordinates: $position;
		$position: relative;
	}

	$coordinates: unpack($coordinates);

	$offsets: (
					top:    nth($coordinates, 1),
					right:  nth($coordinates, 2),
					bottom: nth($coordinates, 3),
					left:   nth($coordinates, 4)
	);

	position: $position;

	@each $offset, $value in $offsets {
		@if is-length($value) {
			#{$offset}: $value;
		}
	}
}





/*
Stagger delay mixin, takes 4 parameters:

1) Nr of children, that need to stagger
2) Initial delay of animation / transition
3) Delay between each child's animation / transition
4) Type of stagger. Default is "animation", also takes "transition"
*/

/* **************** Usage ***************** */
/* ************* 1. Animation ************* */
/*
.foo {
  //...some code

  animation: some-animation 1s ease forwards;
  @include stagger-delay(4, 1s, 0.15s);
}
*/

/* ************* 2. Transition ************* */
/*
.foo {
  //...some code

  transition: 400ms ease all;
  @include stagger-delay(4, 1s, 0.15s, transition);

  &:hover {
    //...some more code
  }
}
*/
@mixin stagger-delay($i, $initial-delay, $stagger-delay, $type: animation) {
	@while $i > 0 {
		&:nth-of-type(#{$i}) {
			#{$type}-delay: $initial-delay + $stagger-delay * $i;
		}
		$i: $i - 1;
	}
}





/*
Mixin for styling placeholders
*/
@mixin placeholder {
	$placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
	@each $placeholder in $placeholders {
		&:#{$placeholder}-placeholder {
			@content;
		}
	}
}